version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: adobe-postgres
    environment:
      POSTGRES_DB: image_platform
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d image_platform"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - adobe-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: adobe-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - adobe-network

  # Upload Service - Your main application
  upload-service:
    build: 
      context: .
      dockerfile: upload-service/Dockerfile
    container_name: adobe-upload-service
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - AWS_S3_ENDPOINT=http://host.docker.internal:4566
      - AWS_S3_BUCKET_NAME=adobe-images
      - AWS_S3_REGION=us-east-1
      - AWS_S3_ACCESS_KEY=test
      - AWS_S3_SECRET_KEY=test
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - adobe-network

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: adobe-nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - upload-service
    restart: unless-stopped
    networks:
      - adobe-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  adobe-network:
    driver: bridge